# you can move this content to front matter of [language]/tabs/projects.md
###########################################################
#                Projects Page Data
###########################################################
page_data:
  main:
    header: "Projects"
    info: "Computers, electronics, and lessons in humility"
    text_color: "white"
    # if you don't want to use background image, comment it. back_color will be activated.
    # img: ":projects-heading.jpg"
    back_color: "darkgrey"

  category:
    - title: "Example"
      type: id_example
      color: "gray"
    - title: "Picture"
      type: id_picture
      color: "#62b462"
    - title: "Quote"
      type: id_quote
      color: "#2FD0ED"

  list:
    # example
    - type: id_example
      project_name: "UCI Rocket Project Data Visualization System"
      project_excerpt: "A grafana based system to analyze sensor data during testing and launch."
      img: ":project1_thumb.jpg"
      img_title: "img title1"
      # formatting is yyyy/mm/dd
      date: "2023-05-18"
      post: |
        # Components
        - Grafana
        - PostgreSQL
        - Docker
        - Python data gathering scripts on Debian
        - Custom grafana Panel Plugins to visualize flight data

        # Context and Benefits 

        This project was started after our python and LabView based systems were found
        to be insufficiently flexible for our needs with the in-flight engine control 
        hardware that was being developed. The in-flight engine controller required our 
        frontend visualization systems to be more adaptable as it evolved
        into its final configuration.

        The grafana based solution provided a visual editor which allowed quick edits to data
        sources and graphs as sensors were added and removed from the system. It allowed for faster
        component failure detection as well. This suited us quite well.

        The usage of PostgreSQL was mostly due to familiarity. It was later found as we approached 
        the launch date that PostgreSQL was not the best choice but the performance was found to be
        acceptable with some tuning. So through inertia we stuck with it. We plan to switch to a 
        more appropriate time series database i.e., Influx DB on the next testing and flight system.

        The custom panel plugins that I created was a panel which could display the pitch and yaw of 
        the rocket as it was in flight. This was quite similar to dials used in real flight systems
        to display this information.

        We used docker since one of the other problems encountered with the old system was the inability 
        to run it reliably across different people computer's. The old code base was worked on by many
        members on a shared test computer with changes made as required. This resulted in machine specific
        dependencies and quirks. The docker based system allowed us to rely on us being able to bring
        up a working data acquisition and visualization on any device that had docker installed which
        allowed for faster development.

        # The Big Day

        The most critical day for this system was obviously on the day of the launch of the rocket. 
        On this day, this system was run for over 10 hours in the sweltering heat of the Mojave desert
        and was found to be reliable for all of it. The system was up and running immediately once 
        the hardware was on the network unlike our previous systems which would require fiddling around
         and full restarts of the our test computer if any wires were moved.

        There was a undiagnosed failure near the end which stopped updating the GUI. This was worked 
        around by running the system on different computer. We suspect a hardware fault in the computer 
        since the other computer was immediately stable without any issues. This showed the benefits of 
        the docker based approach as it allowed us to migrate to a different machine when the primary system 
        failed on us.

        # Roadmap

        As mentioned we will be switching to Influx DB since it is a far more appropriate system for our
        application. There is also a Telegraf which is a agent that complements Influx DB which is under 
        consideration. The usage of Influx DB will provide us with better time series capabilities in our
        database providing window based averaging and other processing in the database so we can avoid 
        visualizing thousands of data points.

        The Telegram system is for a live count of system conditions. It provides a push based feed to 
        the grafana frontend over websocket. It will also act as the agent the collects information from 
        the engine control systems and feed them to the database.

    # picture
    - type: id_example
      project_name: "PTR Engine Control System"
      project_excerpt: "In-Flight Engine Control System for UCI Rocket Project's Preliminary Test Rocket"
      img: ":ECU.jpg"
      img_title: "ECU-1.5 Orion"
      date: "2023-05-18"
      post: |
        ## Components
        - Teensy 4.1 MCU
        - W5500 10BASE-T Ethernet Module over SPI
        - MAX31855 temperature sensing IC's

        ## Context and Benefits
        
        The UCI Rocket Project was at a point where we in a position to Veritically Test Fire in Late
        January of 2023. Up to this point all Avionics systems would remain on the ground and didn't 
        need to implemented in such an integrated package. With our successful vertical firing of the
        engine came the need to put the avionics in flight-ready configuration. The ECU-1.5 was designed 
        with this in mind.

        The system was designed to be compatible with the original ECU that was used for the Vertical
        Test Fire.

        It integrated previously disparate actuation and sensor data measurement systems into one 
        complete package to be put on our Preliminary Test Rocket. The major wins on this was the 
        highly reliable communication system since it used mostly off the shelf networking equipment.
        This allowed to apply knowledge from our networking systems classes to make the system 
        more efficient as well in terms of wiring costs as we reduced the length of total necessary 
        cables by 33%. Further, the number of packets transferred for every action was dropped to
        1/3 of it's original rate which increased the responsiveness of the system.

        This was even extended to take over some of the duties of our old and somewhat
        troublesome LabView system. We used one of the spare ECU-1.5 boards to replace it.
        On the first run, this caused havoc on our network since 2 of these boards had never
        been tested to run in parallel on the same network. I found that this was because of a 
        somewhat gnarly issue at the link layer where both boards were programmed to have the 
        same MAC address.

        ## Problems

        The temperature sensor was huge challenge since we were in a very noisy electro-magnetically 
        noisy environment with solenoids valves opening and closing causing it to have very noisy 
        readings as well. This will need to be addressed in a future design.

        ## Roadmap

        A new engine control unit is under design for the UCI Rocket Project REAPER rocket. This
        will have a better feedback system for solenoids and will carry forward many of the same 
        design choices while trying too make it more robust to mistakes in the connections to various
        sensors to protect from human errors.

    - type: id_example
      project_name: Grafana Clone
      project_excerpt: A graphing system inspired by grafana which is incremental by default and can provide online analysis of real-time data.
      img_title: "Photo of the whole application"
      date: "2023-05-19"
      post: |
        This utilizes a Svelte based frontend and a Go backend in order to create a graph from given 
        sensor data. Currently this is in development and hence only support postgresql as a data source.
        Additionally, I only have Linear Regression implemented for online analysis of the data. 

        The system works by pushing new data to the client using websockets. It implements ping/ping pattern
        in order to make sure that the client has a live connection to the server and that the server is still
        present. Further, it has reconnection and exponential back-off based retries built into the system in
        order to make sure network is not overloaded if the server is currently not accessible. This also makes
        sure that we get live data back as soon as a connection to the server is possible.

    - type: id_example
      project_name: Micro-mouse
      project_excerpt: IEEE@UCI's entry to the AAMC
      project_excerpt: Built a Micro-mouse robot which was to compete in AAMC
      img_title: "2023-05-28"
      post: |

        I undertook this project in my Freshman Year at UCI. We received funding from the Undergraduate Research
        Opportunities Program (UROP). For this competition we manufactured and assembled a PCB, and developed the
        software to navigate the Micro-mouse through the maze.

        The main issue we faced in this case was that we had under powered the H-Bridge which caused one of our motors
        to not receive power at the same time as the other. This meant that we had to compensate for this quite
        heavily in software. A large portion of the learning from this competition was also using nested PID
        control loops. Our initial software only used PID's to make the robot go straight but we slowly realized 
        that we would need PID control loops to ensure we move a consistent distance every time, and 
        to turn properly.
        
        We were caught off guard by the effects of physics in our system which we had not considered until we
        were quite late in the design process. We failed to account for momentum of our system and how battery
        voltage would affect how much momentum had when we tried to stop. This made the learning curve quite 
        steep overall.
      